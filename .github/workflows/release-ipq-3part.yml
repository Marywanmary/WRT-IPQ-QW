name: IPQ60XX-分层编译

# 工作流触发条件
on:
  workflow_dispatch:  # 手动触发
  schedule:
    # 北京时间每周五0点（UTC时间每周四16:00）
    - cron: '0 16 * * 4'

# 环境变量设置
env:
  CHIP: ipq60xx  # 芯片架构变量

# 作业定义
jobs:
  # 设置作业：仅动态获取设备列表
  setup:
    runs-on: ubuntu-22.04
    outputs:
      devices: ${{ steps.get-devices.outputs.devices }}  # 输出设备列表
    
    steps:
    # 检出代码
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 设置脚本权限
    - name: 设置脚本权限
      run: |
        echo "===== 设置脚本权限 ====="
        chmod +x scripts/*.sh
        echo "Setup作业: 已为所有脚本文件添加执行权限"
        echo "验证权限设置:"
        ls -la scripts/*.sh
        echo "========================="

    # 从配置文件中获取设备列表（关键步骤）
    - name: 获取设备列表
      id: get-devices
      run: |
        echo "===== 从配置文件获取设备列表 ====="
        
        # 检查基础配置文件是否存在
        if [ ! -f "configs/${{ env.CHIP }}_base.config" ]; then
          echo "错误: 配置文件 configs/${{ env.CHIP }}_base.config 不存在!"
          echo "devices=[]" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # 验证脚本权限
        if [ ! -x "scripts/get-devices.sh" ]; then
          echo "错误: get-devices.sh 脚本没有执行权限"
          chmod +x scripts/get-devices.sh
        fi
        
        # 执行脚本获取设备列表
        echo "正在解析配置文件中的设备名称..."
        DEVICES=$(./scripts/get-devices.sh configs/${{ env.CHIP }}_base.config)
        
        # 检查脚本执行结果
        if [ $? -ne 0 ] || [ -z "$DEVICES" ]; then
          echo "警告: 无法从配置文件获取设备列表，使用默认设备"
          DEVICES='["jdcloud_re-ss-01","jdcloud_re-cs-02"]'
        fi
        
        # 输出设备列表
        echo "devices=$DEVICES" >> $GITHUB_OUTPUT
        echo "检测到的设备列表: $DEVICES"
        echo "================================"

  # 构建作业：按配置类型顺序编译
  build:
    needs: setup  # 依赖setup作业获取设备列表
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # 按配置类型优先级排序（关键优化）
        config: ["Ultra", "Max", "Pro"]
        repo: 
          - { url: "https://github.com/laipeng668/immortalwrt.git", branch: "master", short: "immwrt" }
          - { url: "https://github.com/laipeng668/openwrt.git", branch: "master", short: "openwrt" }
          - { url: "https://github.com/laipeng668/openwrt-6.x.git", branch: "k6.12-nss", short: "libwrt" }
        # 从setup作业动态获取设备列表
        device: ${{ fromJson(needs.setup.outputs.devices) }}
      max-parallel: 6  # 最大并行数
      fail-fast: false  # 不快速失败

    steps:
    # 检出代码
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 在build作业开始时设置权限
    - name: 设置脚本权限
      run: |
        echo "===== 设置脚本权限 ====="
        chmod +x scripts/*.sh
        echo "Build作业: 已为所有脚本文件添加执行权限"
        echo "验证权限设置:"
        ls -la scripts/*.sh
        echo "========================="

    # 显示初始磁盘空间
    - name: 显示初始磁盘空间
      run: |
        echo "===== 初始磁盘空间 ====="
        df -h
        echo "========================="

    # 释放磁盘空间
    - name: 释放磁盘空间
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true
        docker-images: true

    # 显示清理后的磁盘空间
    - name: 显示清理后的磁盘空间
      run: |
        echo "===== 清理后的磁盘空间 ====="
        df -h
        echo "============================="

    # 安装编译环境（修复后的命令）
    - name: 安装编译环境
      run: |
        echo "===== 安装编译环境 ====="
        sudo apt-get update
        
        # 检查Ubuntu版本
        UBUNTU_VERSION=$(lsb_release -rs)
        echo "Ubuntu版本: $UBUNTU_VERSION"
        
        # 在Ubuntu 22.04及更高版本中，python3-distutils已被弃用
        # 直接安装python3-setuptools，它提供了相同的功能
        echo "安装Python相关依赖..."
        sudo apt-get install -y python3-setuptools
        
        # 安装其他编译依赖
        echo "安装编译工具链..."
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev rsync swig unzip zlib1g-dev file wget ccache xz-utils python3-pyelftools jq
        
        echo "验证安装..."
        python3 --version
        echo "===== 编译环境安装完成 ====="

    # 显示编译前系统信息
    - name: 显示编译前系统信息
      run: |
        echo "===== 编译前系统信息 ====="
        echo "## 当前编译任务信息 ##"
        echo "仓库: ${{ matrix.repo.short }}"
        echo "配置: ${{ matrix.config }}"
        echo "设备: ${{ matrix.device }}"
        echo ""
        echo "## CPU信息 ##"
        lscpu | grep -E "(Model name|Architecture|CPU\(s\)|Thread|Core)"
        echo ""
        echo "## 内存信息 ##"
        free -h
        echo ""
        echo "## 磁盘空间信息 ##"
        df -h
        echo ""
        echo "## 系统负载信息 ##"
        uptime
        echo "========================="

    # 缓存配置文件
    - name: 缓存配置文件
      id: cache-config
      uses: actions/cache@v4
      with:
        path: configs/
        key: ${{ runner.os }}-config-${{ env.CHIP }}-${{ hashFiles('configs/*.config') }}
        restore-keys: |
          ${{ runner.os }}-config-${{ env.CHIP }}-

    # 缓存源码包
    - name: 缓存源码包
      id: cache-dl
      uses: actions/cache@v4
      with:
        path: dl/
        key: ${{ runner.os }}-dl-${{ matrix.repo.short }}-${{ env.CHIP }}-${{ hashFiles('feeds.conf', 'include/*') }}
        restore-keys: |
          ${{ runner.os }}-dl-${{ matrix.repo.short }}-${{ env.CHIP }}-

    # 缓存工具链
    - name: 缓存工具链
      id: cache-staging
      uses: actions/cache@v4
      with:
        path: staging_dir/
        key: ${{ runner.os }}-staging-${{ matrix.repo.short }}-${{ env.CHIP }}-${{ matrix.device }}-${{ hashFiles('.config') }}
        restore-keys: |
          ${{ runner.os }}-staging-${{ matrix.repo.short }}-${{ env.CHIP }}-${{ matrix.device }}-

    # 缓存编译缓存
    - name: 缓存编译缓存
      id: cache-ccache
      uses: actions/cache@v4
      with:
        path: .ccache/
        key: ${{ runner.os }}-ccache-${{ matrix.repo.short }}-${{ env.CHIP }}-${{ matrix.device }}-${{ matrix.config }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-${{ matrix.repo.short }}-${{ env.CHIP }}-${{ matrix.device }}-

    # 克隆OpenWrt仓库
    - name: 克隆OpenWrt仓库
      run: |
        git clone --depth 1 --branch ${{ matrix.repo.branch }} ${{ matrix.repo.url }} openwrt
        cd openwrt
        echo "REPO_SHORT=${{ matrix.repo.short }}" >> $GITHUB_ENV

    # 添加管理第三方软件源
    - name: 管理第三方软件源
      run: |
       echo "===== 管理第三方软件源 ====="
       # 验证脚本权限
       if [ ! -x "scripts/manage-feeds.sh" ]; then
        echo "警告: manage-feeds.sh 脚本没有执行权限，重新设置..."
        chmod +x scripts/manage-feeds.sh
       fi
       ./scripts/manage-feeds.sh openwrt
       echo "第三方软件源管理完成"
       echo "========================="

    # 设置默认配置（带权限检查）
    - name: 设置默认配置
      run: |
        echo "===== 设置默认配置 ====="
        # 验证脚本权限
        if [ ! -x "scripts/set-default-config.sh" ]; then
          echo "警告: set-default-config.sh 脚本没有执行权限，重新设置..."
          chmod +x scripts/set-default-config.sh
        fi
        ./scripts/set-default-config.sh openwrt
        echo "默认配置设置完成"
        echo "========================="

    # 合并配置文件（带权限检查）
    - name: 合并配置文件
      run: |
        echo "===== 合并配置文件 ====="
        # 验证脚本权限
        if [ ! -x "scripts/merge-configs.sh" ]; then
          echo "警告: merge-configs.sh 脚本没有执行权限，重新设置..."
          chmod +x scripts/merge-configs.sh
        fi
        ./scripts/merge-configs.sh ${{ matrix.repo.short }} ${{ matrix.config }} ${{ matrix.device }} ${{ env.CHIP }}
        echo "配置文件合并完成"
        echo "========================="

    # 更新软件源
    - name: 更新软件源
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    # 生成配置文件
    - name: 生成配置文件
      run: |
        cd openwrt
        cp ../.config .config
        make defconfig

    # 编译固件
    - name: 编译固件
      run: |
        cd openwrt
        echo "===== 开始编译 ${{ matrix.config }} 配置 ====="
        echo -e "$(nproc) thread build"
        make -j$(nproc) V=s || echo "Build failed with exit code $?" > ../build-error.log
        if [ -f "../build-error.log" ]; then
          cat ../build-error.log
          exit 1
        fi
        echo "===== ${{ matrix.config }} 配置编译完成 ====="

    # 显示编译后系统信息
    - name: 显示编译后系统信息
      if: always()
      run: |
        echo "===== 编译后系统信息 ====="
        echo "## CPU信息 ##"
        lscpu | grep -E "(Model name|Architecture|CPU\(s\)|Thread|Core)"
        echo ""
        echo "## 内存信息 ##"
        free -h
        echo ""
        echo "## 磁盘空间信息 ##"
        df -h
        echo ""
        echo "## 系统负载信息 ##"
        uptime
        echo ""
        echo "## 编译目录大小 ##"
        if [ -d "openwrt" ]; then
          echo "OpenWrt目录大小: $(du -sh openwrt | cut -f1)"
        fi
        if [ -d "dl" ]; then
          echo "dl目录大小: $(du -sh dl | cut -f1)"
        fi
        if [ -d "staging_dir" ]; then
          echo "staging_dir目录大小: $(du -sh staging_dir | cut -f1)"
        fi
        if [ -d ".ccache" ]; then
          echo ".ccache目录大小: $(du -sh .ccache | cut -f1)"
        fi
        echo "========================="

    # 准备构建产物（带权限检查）
    - name: 准备构建产物
      run: |
        echo "===== 准备构建产物 ====="
        # 验证脚本权限
        if [ ! -x "scripts/rename-firmware.sh" ]; then
          echo "警告: rename-firmware.sh 脚本没有执行权限，重新设置..."
          chmod +x scripts/rename-firmware.sh
        fi
        ./scripts/rename-firmware.sh ${{ matrix.repo.short }} ${{ matrix.config }} ${{ matrix.device }} ${{ env.CHIP }}
        echo "构建产物准备完成"
        echo "========================="

    # 上传构建日志
    - name: 上传构建日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.repo.short }}-${{ matrix.config }}-${{ matrix.device }}-${{ env.CHIP }}
        path: |
          openwrt/build.log
          build-error.log
        retention-days: 7

    # 上传构建产物
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.repo.short }}-${{ matrix.config }}-${{ matrix.device }}-${{ env.CHIP }}
        path: artifacts/
        retention-days: 7

  # 发布作业：创建Release
  release:
    needs: [setup, build]  # 依赖setup和build作业
    runs-on: ubuntu-22.04
    # 只在定时触发或手动触发时运行
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    # 检出代码
    - name: 检出代码
      uses: actions/checkout@v4

    # 在release作业中也设置权限
    - name: 设置脚本权限
      run: |
        echo "===== 设置脚本权限 ====="
        chmod +x scripts/*.sh
        echo "Release作业: 已为所有脚本文件添加执行权限"
        echo "验证权限设置:"
        ls -la scripts/*.sh
        echo "========================="

    # 下载所有构建产物
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    # 准备发布文件（带权限检查）
    - name: 准备发布文件
      run: |
        echo "===== 准备发布文件 ====="
        mkdir -p release
        # 合并所有固件和配置文件
        for dir in artifacts/firmware-*; do
          if [ -d "$dir" ]; then
            cp -r "$dir"/* release/
          fi
        done
        # 合并所有配置文件
        tar -czf release/${{ env.CHIP }}-config.tar.gz -C release ${{ env.CHIP }}-config/ 2>/dev/null || true
        # 合并所有日志文件
        tar -czf release/${{ env.CHIP }}-log.tar.gz -C release ${{ env.CHIP }}-log/ 2>/dev/null || true
        # 合并所有软件包
        tar -czf release/${{ env.CHIP }}-app.tar.gz -C release ${{ env.CHIP }}-app/ 2>/dev/null || true
        
        # 验证脚本权限
        if [ ! -x "scripts/generate-release-notes.sh" ]; then
          echo "警告: generate-release-notes.sh 脚本没有执行权限，重新设置..."
          chmod +x scripts/generate-release-notes.sh
        fi
        
        # 生成发布说明
        ./scripts/generate-release-notes.sh ${{ env.CHIP }} > release/RELEASE_NOTES.md
        echo "发布文件准备完成"
        echo "========================="

    # 创建Release
    - name: 创建Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: $(date +%Y%m%d)-${{ env.CHIP }}
        name: ${{ env.CHIP }} Build $(date +%Y%m%d)
        body_path: release/RELEASE_NOTES.md
        files: |
          release/*.bin
          release/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
